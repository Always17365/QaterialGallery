#
#	QQuickMaterialHelperGallery CMake script by Olivier Le Doeuff
#

# ┌──────────────────────────────────────────────────────────────────┐
# │						  CMAKE PROPERTIES							 │
# └──────────────────────────────────────────────────────────────────┘

CMAKE_MINIMUM_REQUIRED( VERSION 3.1.0 )

# ┌──────────────────────────────────────────────────────────────────┐
# │						  PROJECT SETTINGS							 │
# └──────────────────────────────────────────────────────────────────┘

SET( QQUICKMATERIALHELPERGALLERY_TARGET "QQuickMaterialHelperGallery" CACHE STRING "Target Name" )
SET( QQUICKMATERIALHELPERGALLERY_PROJECT "QQuickMaterialHelperGallery" CACHE STRING "Project Name")
SET( QQUICKMATERIALHELPERGALLERY_BUILD_SHARED OFF CACHE BOOL "Build as a shared library" )
SET( QQUICKMATERIALHELPERGALLERY_BUILD_STATIC OFF CACHE BOOL "Build as a static library" )
IF(QQUICKMATERIALHELPERGALLERY_BUILD_SHARED)
SET( QQUICKMATERIALHELPERGALLERY_BUILD_EXE OFF CACHE BOOL "Build as an executable" )
ELSE(QQUICKMATERIALHELPERGALLERY_BUILD_SHARED)
SET( QQUICKMATERIALHELPERGALLERY_BUILD_EXE ON CACHE BOOL "Build as an executable" )
ENDIF(QQUICKMATERIALHELPERGALLERY_BUILD_SHARED)
SET( QQUICKMATERIALHELPERGALLERY_USE_NAMESPACE ON CACHE BOOL "Should the library be compiled with a namespace. Default: ON" )
SET( QQUICKMATERIALHELPERGALLERY_NAMESPACE "Qqhg" CACHE STRING "Namespace of the library is QQUICKMATERIALHELPERGALLERY_USE_NAMESPACE is ON. Default : Qqhg" )

SET( QTANDROIDCMAKE_REPOSITORY "https://github.com/OlivierLDff/QtAndroidCMake.git" CACHE STRING "Repository of QtAndroidCMake" )
SET( QTANDROIDCMAKE_TAG "master" CACHE STRING "Git Tag of QtAndroidCMake" )

SET( QTWINDOWSCMAKE_REPOSITORY "https://github.com/OlivierLDff/QtWindowsCMake" CACHE STRING "Repository of QtAndroidCMake" )
SET( QTWINDOWSCMAKE_TAG "master" CACHE STRING "Git Tag of QtAndroidCMake" )

#SET( QQUICKMATERIALHELPER_REPOSITORY "https://github.com/OlivierLDff/QQuickMaterialHelper.git" CACHE STRING "Repository of QQuickMaterialHelper" )
#SET( QQUICKMATERIALHELPER_TAG "master" CACHE STRING "Git Tag of QQuickMaterialHelper" )

PROJECT( ${QQUICKMATERIALHELPERGALLERY_PROJECT} )
SET_PROPERTY(GLOBAL PROPERTY USE_FOLDERS ON)

# ────────── PRE BUILD PLATFORM DEPENDANCIES ─────────────

INCLUDE(${CMAKE_CURRENT_SOURCE_DIR}/platform/PreBuildPlatform.cmake)

# ┌──────────────────────────────────────────────────────────────────┐
# │						  	QT5 CMAKE 								 │
# └──────────────────────────────────────────────────────────────────┘

# Find includes in corresponding build directories
SET( CMAKE_INCLUDE_CURRENT_DIR ON )
# Instruct CMake to run moc automatically when needed
SET( CMAKE_AUTOMOC ON )
 # https://cmake.org/cmake/help/v3.0/prop_tgt/AUTORCC.html#prop_tgt:AUTORCC
SET( CMAKE_AUTORCC ON )
#required by Qt5
set (CMAKE_CXX_STANDARD 11) 

SET(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE BOTH)

FIND_PACKAGE(Qt5Core CONFIG REQUIRED CMAKE_FIND_ROOT_PATH_BOTH )
FIND_PACKAGE(Qt5Quick CONFIG REQUIRED CMAKE_FIND_ROOT_PATH_BOTH )
FIND_PACKAGE(Qt5QuickControls2 CONFIG REQUIRED CMAKE_FIND_ROOT_PATH_BOTH )
FIND_PACKAGE(Qt5QuickCompiler CONFIG REQUIRED CMAKE_FIND_ROOT_PATH_BOTH )

SET(CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake")

# ┌──────────────────────────────────────────────────────────────────┐
# │						  VERSION 	 								 │
# └──────────────────────────────────────────────────────────────────┘

# Project version must be set here
SET(QQUICKMATERIALHELPERGALLERY_VERSION_MAJOR 1)
SET(QQUICKMATERIALHELPERGALLERY_VERSION_MINOR 0)
SET(QQUICKMATERIALHELPERGALLERY_VERSION_PATCH 0)

IF( EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/.git" )
	EXECUTE_PROCESS(
		COMMAND git describe --always
		WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
		OUTPUT_VARIABLE QQUICKMATERIALHELPERGALLERY_VERSION_TAG
		OUTPUT_STRIP_TRAILING_WHITESPACE
	)
ENDIF()
IF(NOT QQUICKMATERIALHELPERGALLERY_VERSION_TAG)
	SET( QQUICKMATERIALHELPERGALLERY_VERSION_TAG 00000000 )
ENDIF(NOT QQUICKMATERIALHELPERGALLERY_VERSION_TAG)
SET( QQUICKMATERIALHELPERGALLERY_VERSION_TAG_HEX 0x${QQUICKMATERIALHELPERGALLERY_VERSION_TAG})
SET( QQUICKMATERIALHELPERGALLERY_VERSION ${QQUICKMATERIALHELPERGALLERY_VERSION_MAJOR}.${QQUICKMATERIALHELPERGALLERY_VERSION_MINOR}.${QQUICKMATERIALHELPERGALLERY_VERSION_PATCH} )

# ┌──────────────────────────────────────────────────────────────────┐
# │						  STATUS 	 								 │
# └──────────────────────────────────────────────────────────────────┘

# ─── GLOBAL ────────
MESSAGE( STATUS "------ ${QQUICKMATERIALHELPERGALLERY_TARGET} Configuration ------" )
MESSAGE( STATUS "QQUICKMATERIALHELPERGALLERY_BUILD_SHARED           : ${QQUICKMATERIALHELPERGALLERY_BUILD_SHARED}" )
MESSAGE( STATUS "QQUICKMATERIALHELPERGALLERY_BUILD_STATIC           : ${QQUICKMATERIALHELPERGALLERY_BUILD_STATIC}" )
MESSAGE( STATUS "QQUICKMATERIALHELPERGALLERY_BUILD_EXE              : ${QQUICKMATERIALHELPERGALLERY_BUILD_EXE}" )
MESSAGE( STATUS "QQUICKMATERIALHELPERGALLERY_VERSION                : ${QQUICKMATERIALHELPERGALLERY_VERSION}" )
MESSAGE( STATUS "QQUICKMATERIALHELPERGALLERY_VERSION_TAG_HEX        : ${QQUICKMATERIALHELPERGALLERY_VERSION_TAG_HEX}" )
# ─── NAMESPACE ────────
MESSAGE( STATUS "QQUICKMATERIALHELPERGALLERY_USE_NAMESPACE          : ${QQUICKMATERIALHELPERGALLERY_USE_NAMESPACE}" )
IF(QQUICKMATERIALHELPERGALLERY_USE_NAMESPACE)
MESSAGE( STATUS "QQUICKMATERIALHELPERGALLERY_NAMESPACE              : ${QQUICKMATERIALHELPERGALLERY_NAMESPACE}" )
ENDIF(QQUICKMATERIALHELPERGALLERY_USE_NAMESPACE)

MESSAGE( STATUS "------ ${QQUICKMATERIALHELPERGALLERY_TARGET} End Configuration ------" )

# ────────── CHECK CONFLICT ──────────────────────────────────────────

IF(QQUICKMATERIALHELPERGALLERY_BUILD_SHARED)
	IF(QQUICKMATERIALHELPERGALLERY_BUILD_STATIC)
		MESSAGE( FATAL_ERROR "QQuickMaterialHelperGallery can't compile shared and static library at the same time" )
	ENDIF(QQUICKMATERIALHELPERGALLERY_BUILD_STATIC)
	IF(QQUICKMATERIALHELPERGALLERY_BUILD_EXE)
		MESSAGE( FATAL_ERROR "QQuickMaterialHelperGallery can't compile shared library and executable at the same time" )
	ENDIF(QQUICKMATERIALHELPERGALLERY_BUILD_EXE)
ENDIF(QQUICKMATERIALHELPERGALLERY_BUILD_SHARED)

IF(QQUICKMATERIALHELPERGALLERY_BUILD_STATIC)
	IF(QQUICKMATERIALHELPERGALLERY_BUILD_SHARED)
		MESSAGE( FATAL_ERROR "QQuickMaterialHelperGallery can't compile shared and static library at the same time" )
	ENDIF(QQUICKMATERIALHELPERGALLERY_BUILD_SHARED)
	IF(QQUICKMATERIALHELPERGALLERY_BUILD_EXE)
		MESSAGE( FATAL_ERROR "QQuickMaterialHelperGallery can't compile static library and executable at the same time" )
	ENDIF(QQUICKMATERIALHELPERGALLERY_BUILD_EXE)
ENDIF(QQUICKMATERIALHELPERGALLERY_BUILD_STATIC)

IF(QQUICKMATERIALHELPERGALLERY_BUILD_EXE)
	IF(QQUICKMATERIALHELPERGALLERY_BUILD_SHARED)
		MESSAGE( FATAL_ERROR "QQuickMaterialHelperGallery can't compile shared library and executable at the same time" )
	ENDIF(QQUICKMATERIALHELPERGALLERY_BUILD_SHARED)
	IF(QQUICKMATERIALHELPERGALLERY_BUILD_STATIC)
		MESSAGE( FATAL_ERROR "QQuickMaterialHelperGallery can't compile static library and executable at the same time" )
	ENDIF(QQUICKMATERIALHELPERGALLERY_BUILD_STATIC)
ENDIF(QQUICKMATERIALHELPERGALLERY_BUILD_EXE)

# ┌──────────────────────────────────────────────────────────────────┐
# │						  DEPENDENCIES 								 │
# └──────────────────────────────────────────────────────────────────┘

# ────────── QSM HELPER LIB ──────────────────────────────────────────

IF(QQUICKMATERIALHELPER_TARGET AND NOT EREIDM_DOWNLOAD_QQUICKMATERIALHELPER)
    MESSAGE( STATUS "Found ${QQUICKMATERIALHELPER_TARGET} v${QQUICKMATERIALHELPER_VERSION}" )
ELSE(QQUICKMATERIALHELPER_TARGET AND NOT EREIDM_DOWNLOAD_QQUICKMATERIALHELPER)
    SET(EREIDM_DOWNLOAD_QQUICKMATERIALHELPER ON CACHE BOOL "The QQuickMaterialHelper library have been downloaded")
    INCLUDE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/BuildQQuickMaterialHelper.cmake)
    IF(NOT QQUICKMATERIALHELPER_TARGET)
        MESSAGE( FATAL_ERROR "Fail to configure QQuickMaterialHelper Library" )
    ENDIF(NOT QQUICKMATERIALHELPER_TARGET)
ENDIF(QQUICKMATERIALHELPER_TARGET AND NOT EREIDM_DOWNLOAD_QQUICKMATERIALHELPER)

# ┌──────────────────────────────────────────────────────────────────┐
# │						  SOURCES 	 								 │
# └──────────────────────────────────────────────────────────────────┘

file(GLOB_RECURSE QQUICKMATERIALHELPERGALLERY_QML_SRCS qml/*.qml)

foreach(_source IN ITEMS ${QQUICKMATERIALHELPERGALLERY_QML_SRCS})
	get_filename_component(_source_path "${_source}" PATH)
	file(RELATIVE_PATH _source_path_rel ${CMAKE_CURRENT_SOURCE_DIR} "${_source_path}")
	string(REPLACE "/" "\\" _group_path "${_source_path_rel}")
	source_group("${_group_path}" FILES "${_source}")
endforeach()

SET( QQUICKMATERIALHELPERGALLERY_SRCS 
	# Main
	${CMAKE_CURRENT_SOURCE_DIR}/src/Main.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/src/QQuickMaterialHelperGallery.hpp
	${CMAKE_CURRENT_SOURCE_DIR}/src/QQuickMaterialHelperGallery.cpp
	${QQUICKMATERIALHELPERGALLERY_QML_SRCS}
	${CMAKE_CURRENT_SOURCE_DIR}/images/images.qrc
	)

# ┌──────────────────────────────────────────────────────────────────┐
# │						  TARGET 	 								 │
# └──────────────────────────────────────────────────────────────────┘

# ────────── QML TO CACHE ───────────

# Add qml to the qtquick compiler
qtquick_compiler_add_resources(QQUICKMATERIALHELPERGALLERY_QML_RES ${CMAKE_CURRENT_SOURCE_DIR}/qml/qquickHelperGallery.qrc)

# Trick to rerun cmake each time qquickHelperGallery.qrc is updated
CONFIGURE_FILE(
  ${CMAKE_CURRENT_SOURCE_DIR}/qml/qquickHelperGallery.qrc
  ${CMAKE_CURRENT_BINARY_DIR}/qml.junk
)

CONFIGURE_FILE(
  ${CMAKE_CURRENT_SOURCE_DIR}/images/images.qrc
  ${CMAKE_CURRENT_BINARY_DIR}/images.junk
)

# Dont Run Moc on cpp file generated from cpp
FOREACH(CacheQml ${QQUICKMATERIALHELPERGALLERY_QML_RES})
	SET_PROPERTY(SOURCE ${CacheQml} PROPERTY SKIP_AUTOMOC ON)
	SOURCE_GROUP( "QtQuickCompiler Files" FILES ${CacheQml} )
ENDFOREACH(CacheQml)

# ───── SHARED ──────────────
IF(QQUICKMATERIALHELPERGALLERY_BUILD_SHARED)
	IF( MSVC )
	INCLUDE (GenerateExportHeader)
	ENDIF( MSVC )

	ADD_LIBRARY( ${QQUICKMATERIALHELPERGALLERY_TARGET} SHARED ${QQUICKMATERIALHELPERGALLERY_SRCS} ${QQUICKMATERIALHELPERGALLERY_QML_RES} )

	IF( MSVC )
	GENERATE_EXPORT_HEADER( ${QQUICKMATERIALHELPERGALLERY_TARGET}
		BASE_NAME ${QQUICKMATERIALHELPERGALLERY_TARGET}
		EXPORT_MACRO_NAME ${QQUICKMATERIALHELPERGALLERY_TARGET}_EXPORT
		EXPORT_FILE_NAME ${QQUICKMATERIALHELPERGALLERY_TARGET}_Export.h
		STATIC_DEFINE ${QQUICKMATERIALHELPERGALLERY_TARGET}_BUILT_AS_STATIC
	)
	ENDIF( MSVC )
	
	TARGET_COMPILE_DEFINITIONS( ${QQUICKMATERIALHELPERGALLERY_TARGET} PRIVATE -DQQUICKMATERIALHELPERGALLERY_SHARED )
ENDIF(QQUICKMATERIALHELPERGALLERY_BUILD_SHARED)

# ───── STATIC ──────────────
IF(QQUICKMATERIALHELPERGALLERY_BUILD_STATIC)
	ADD_LIBRARY( ${QQUICKMATERIALHELPERGALLERY_TARGET} STATIC ${QQUICKMATERIALHELPERGALLERY_SRCS} ${QQUICKMATERIALHELPERGALLERY_QML_RES} )
	TARGET_COMPILE_DEFINITIONS( ${QQUICKMATERIALHELPERGALLERY_TARGET} PUBLIC -DQQUICKMATERIALHELPERGALLERY_STATIC )
ENDIF(QQUICKMATERIALHELPERGALLERY_BUILD_STATIC)

# ───── EXE ──────────────
IF(QQUICKMATERIALHELPERGALLERY_BUILD_EXE)
	ADD_EXECUTABLE( ${QQUICKMATERIALHELPERGALLERY_TARGET} ${QQUICKMATERIALHELPERGALLERY_SRCS} ${QQUICKMATERIALHELPERGALLERY_QML_RES} )	
	TARGET_COMPILE_DEFINITIONS( ${QQUICKMATERIALHELPERGALLERY_TARGET} PUBLIC -DQQUICKMATERIALHELPERGALLERY_STATIC )
ENDIF(QQUICKMATERIALHELPERGALLERY_BUILD_EXE)

# ───── COMMON ──────────────

TARGET_INCLUDE_DIRECTORIES( ${QQUICKMATERIALHELPERGALLERY_TARGET} PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/src )
TARGET_COMPILE_DEFINITIONS( ${QQUICKMATERIALHELPERGALLERY_TARGET} PRIVATE -DQQUICKMATERIALHELPERGALLERY_VERSION_MAJOR=${QQUICKMATERIALHELPERGALLERY_VERSION_MAJOR} )
TARGET_COMPILE_DEFINITIONS( ${QQUICKMATERIALHELPERGALLERY_TARGET} PRIVATE -DQQUICKMATERIALHELPERGALLERY_VERSION_MINOR=${QQUICKMATERIALHELPERGALLERY_VERSION_MINOR} )
TARGET_COMPILE_DEFINITIONS( ${QQUICKMATERIALHELPERGALLERY_TARGET} PRIVATE -DQQUICKMATERIALHELPERGALLERY_VERSION_PATCH=${QQUICKMATERIALHELPERGALLERY_VERSION_PATCH} )
TARGET_COMPILE_DEFINITIONS( ${QQUICKMATERIALHELPERGALLERY_TARGET} PRIVATE -DQQUICKMATERIALHELPERGALLERY_VERSION_TAG=${QQUICKMATERIALHELPERGALLERY_VERSION_TAG} )
TARGET_COMPILE_DEFINITIONS( ${QQUICKMATERIALHELPERGALLERY_TARGET} PRIVATE -DQQUICKMATERIALHELPERGALLERY_VERSION_TAG_HEX=${QQUICKMATERIALHELPERGALLERY_VERSION_TAG_HEX} )
IF(QQUICKMATERIALHELPERGALLERY_USE_NAMESPACE)
TARGET_COMPILE_DEFINITIONS( ${QQUICKMATERIALHELPERGALLERY_TARGET} PUBLIC -DQQUICKMATERIALHELPERGALLERY_USE_NAMESPACE )
TARGET_COMPILE_DEFINITIONS( ${QQUICKMATERIALHELPERGALLERY_TARGET} PUBLIC -DQQUICKMATERIALHELPERGALLERY_NAMESPACE=${QQUICKMATERIALHELPERGALLERY_NAMESPACE} )
ENDIF(QQUICKMATERIALHELPERGALLERY_USE_NAMESPACE)
TARGET_LINK_LIBRARIES( ${QQUICKMATERIALHELPERGALLERY_TARGET} ${QQUICKMATERIALHELPER_TARGET} )
qt5_use_modules( ${QQUICKMATERIALHELPERGALLERY_TARGET} Core Gui Svg Xml XmlPatterns Quick QuickControls2 )

# ────────── POST BUILD PLATFORM DEPENDANCIES ─────────────

INCLUDE(${CMAKE_CURRENT_SOURCE_DIR}/platform/PostBuildPlatform.cmake)